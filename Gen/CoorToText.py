import pytesseract
from PIL import Image
import xlrd
import json
from det_table import *

# coor=[(left, up, right, bottom),...]
def CoorToText(imagepath,coor):
	image = Image.open(imagepath)
	records=[];
	# image.show()
	for num, pos in enumerate(coor) :
		# ???
		croppedimage = image.crop((pos[1]+3,pos[0]+3,pos[3],pos[2]))
		# croppedimage.show()
		text = pytesseract.image_to_string(croppedimage).replace("\n", "")
		croppedimage.save("./results/"+str(num)+"-"+text.strip('?')+".jpg")
		if(len(text)==0):
			text = "*SDE*"; # Single digit error
		print("Rect " + str(num + 1) + " finished. The result is " + text)
		# state = str(num + 1) + " " + text + "\n"
		# file.write(state)
		# record = (num + 1, text, pos)
		record = text
		records.append(record)
	return records

def CreateJson_old(filepath,records) :
	tem = GetTem(1);
	dic = {}
	tempdic = {}
	flag = 0
	col = 0
	cnt = 0
	for num, val in enumerate(tem):
		print(str(num) + ' ' + str(val) + ' ' + str(records[num]));
	for num, val in enumerate(records):
		if(tem[num] == val and tem[num + 1] == '*'):
			dic[tem[num]] = records[num+1]
		elif(tem[num] == '#'):
			flag = 0
			tempdic[field[col]]=val;
			col = col + 1
			if(col == len(field)):
				cnt = cnt + 1
				dic["Item"+str(cnt)] = tempdic;
				tempdic = {}
				col = 0;
		elif(flag == 1):
			field.append(val);
		elif(tem[num] not in ['*','#'] and tem[num + 1] not in ['*','#']):
			flag = 1
			field = [val];
	print(dic)
	file = open(filepath, "w")
	file.write(json.dumps(dic,indent=4))
	file.close()
	# return records

def CreateJson(filepath,records) :
	tem = GetTem(2);
	dic = {}
	tempdic = {}
	cnt = 0
	for rnum, row in enumerate(tem):
		for cnum, v in enumerate(row):
			val = records[cnt]
			if (v == '*'):
				ccnt = cnum - 1
				while (row[ccnt] == '*'):
					ccnt = ccnt - 1
				key = row[ccnt]
				if (key in dic) :
					dic[key].append(val)
				else:
					dic[key] = [val]
			if (v == '#'):
				rcnt = rnum - 1
				while (tem[rcnt][cnum] == '#'):
					rcnt = rcnt - 1
				key = tem[rcnt][cnum]
				if (key in dic) :
					dic[key].append(val)
				else:
					dic[key] = [val]
			cnt = cnt + 1
	# print(dic)
	file = open(filepath, "w")
	file.write(json.dumps(dic,indent=4))
	file.close()
	# return records


def GetTem(type):
	temPath = "tem.xlsx"
	tem = []
	book = xlrd.open_workbook(temPath);
	sheet = book.sheet_by_index(0);
	for i in range(0, sheet.nrows):
		rowValues = sheet.row_values(i);
		rowValues = [x for x in rowValues if x != '']
		if (type == 1):
			tem.extend(rowValues)
		if (type == 2):
			tem.append(rowValues);
	return tem;

imagepath = "0.png"
filepath = "res.txt"
coor = detTable();
coor = coor.get(imagepath);
# coor = [(92, 244, 115, 432), (92, 432, 115, 620), (92, 620, 115, 809), (92, 809, 115, 1091), (115, 809, 139, 1091), (115, 244, 139, 432), (115, 432, 139, 620), (115, 620, 139, 809), (139, 809, 235, 1091), (139, 244, 163, 432), (139, 432, 163, 620), (139, 620, 163, 809), (163, 244, 235, 338), (163, 338, 235, 432), (163, 432, 235, 527), (163, 527, 235, 620), (163, 620, 235, 714), (163, 714, 235, 809), (163, 902, 235, 997), (163, 997, 235, 1091), (235, 527, 259, 620), (235, 809, 259, 902), (235, 997, 259, 1091), (235, 244, 259, 338), (235, 338, 259, 432), (235, 432, 259, 527), (235, 620, 259, 714), (235, 714, 259, 809), (235, 902, 259, 997), (259, 527, 283, 620), (259, 809, 283, 902), (259, 997, 283, 1091), (259, 244, 283, 338), (259, 338, 283, 432), (259, 432, 283, 527), (259, 620, 283, 714), (259, 714, 283, 809), (259, 902, 283, 997), (283, 527, 307, 620), (283, 809, 307, 902), (283, 997, 307, 1091), (283, 244, 307, 338), (283, 338, 307, 432), (283, 432, 307, 527), (283, 620, 307, 714), (283, 714, 307, 809), (283, 902, 307, 997), (307, 527, 331, 620), (307, 809, 331, 902), (307, 997, 331, 1091), (307, 244, 331, 338), (307, 338, 331, 432), (307, 432, 331, 527), (307, 620, 331, 714), (307, 714, 331, 809), (307, 902, 331, 997), (331, 527, 355, 620), (331, 809, 355, 902), (331, 997, 355, 1091), (331, 244, 355, 338), (331, 338, 355, 432), (331, 432, 355, 527), (331, 620, 355, 714), (331, 714, 355, 809), (331, 902, 355, 997), (355, 527, 379, 620), (355, 809, 379, 902), (355, 997, 379, 1091), (355, 244, 379, 338), (355, 338, 379, 432), (355, 432, 379, 527), (355, 620, 379, 714), (355, 714, 379, 809), (355, 902, 379, 997), (379, 527, 403, 620), (379, 809, 403, 902), (379, 997, 403, 1091), (379, 244, 403, 338), (379, 338, 403, 432), (379, 432, 403, 527), (379, 620, 403, 714), (379, 714, 403, 809), (379, 902, 403, 997), (403, 527, 427, 620), (403, 809, 427, 902), (403, 997, 427, 1091), (403, 244, 427, 338), (403, 338, 427, 432), (403, 432, 427, 527), (403, 620, 427, 714), (403, 714, 427, 809), (403, 902, 427, 997), (427, 527, 451, 620), (427, 809, 451, 902), (427, 997, 451, 1091), (427, 244, 451, 338), (427, 338, 451, 432), (427, 432, 451, 527), (427, 620, 451, 714), (427, 714, 451, 809), (427, 902, 451, 997), (451, 527, 475, 620), (451, 809, 475, 902), (451, 997, 475, 1091), (451, 244, 475, 338), (451, 338, 475, 432), (451, 432, 475, 527), (451, 620, 475, 714), (451, 714, 475, 809), (451, 902, 475, 997), (475, 527, 499, 620), (475, 809, 499, 902), (475, 997, 499, 1091), (475, 244, 499, 338), (475, 338, 499, 432), (475, 432, 499, 527), (475, 620, 499, 714), (475, 714, 499, 809), (475, 902, 499, 997), (499, 527, 523, 620), (499, 809, 523, 902), (499, 997, 523, 1091), (499, 244, 523, 338), (499, 338, 523, 432), (499, 432, 523, 527), (499, 620, 523, 714), (499, 714, 523, 809), (499, 902, 523, 997), (523, 527, 547, 620), (523, 809, 547, 902), (523, 997, 547, 1091), (523, 244, 547, 338), (523, 338, 547, 432), (523, 432, 547, 527), (523, 620, 547, 714), (523, 714, 547, 809), (523, 902, 547, 997), (547, 527, 571, 620), (547, 809, 571, 902), (547, 997, 571, 1091), (547, 244, 571, 338), (547, 338, 571, 432), (547, 432, 571, 527), (547, 620, 571, 714), (547, 714, 571, 809), (547, 902, 571, 997), (571, 809, 595, 1091), (571, 244, 691, 432), (571, 432, 595, 620), (571, 620, 595, 809), (595, 809, 619, 1091), (595, 432, 619, 620), (595, 620, 619, 809), (619, 809, 691, 902), (619, 338, 691, 432), (619, 432, 691, 527), (619, 527, 691, 620), (619, 620, 691, 714), (619, 714, 691, 809), (619, 902, 691, 997), (619, 997, 691, 1091), (691, 527, 715, 620), (691, 809, 715, 902), (691, 997, 715, 1091), (691, 244, 715, 338), (691, 338, 715, 432), (691, 432, 715, 527), (691, 620, 715, 714), (691, 714, 715, 809), (691, 902, 715, 997), (715, 527, 739, 620), (715, 809, 739, 902), (715, 997, 739, 1091), (715, 244, 739, 338), (715, 338, 739, 432), (715, 432, 739, 527), (715, 620, 739, 714), (715, 714, 739, 809), (715, 902, 739, 997)]
#coor = [(123, 195, 157, 474), (123, 474, 157, 754), (123, 754, 157, 1034), (123, 1034, 157, 1455), (157, 195, 191, 474), (157, 474, 191, 754), (157, 754, 191, 1034), (157, 1034, 191, 1455), (191, 195, 226, 474), (191, 474, 226, 754), (191, 754, 226, 1034), (191, 1034, 226, 1455), (226, 195, 330, 334), (226, 474, 330, 614), (226, 754, 330, 894), (226, 1034, 330, 1174), (226, 334, 330, 474), (226, 614, 330, 754), (226, 894, 330, 1034), (226, 1174, 330, 1315), (226, 1315, 330, 1455), (330, 195, 365, 334), (330, 334, 365, 474), (330, 474, 365, 614), (330, 614, 365, 754), (330, 754, 365, 894), (330, 894, 365, 1034), (330, 1034, 365, 1174), (330, 1174, 365, 1315), (330, 1315, 365, 1455), (365, 195, 399, 334), (365, 334, 399, 474), (365, 474, 399, 614), (365, 614, 399, 754), (365, 754, 399, 894), (365, 894, 399, 1034), (365, 1034, 399, 1174), (365, 1174, 399, 1315), (365, 1315, 399, 1455), (399, 195, 434, 334), (399, 334, 434, 474), (399, 474, 434, 614), (399, 614, 434, 754), (399, 754, 434, 894), (399, 894, 434, 1034), (399, 1034, 434, 1174), (399, 1174, 434, 1315), (399, 1315, 434, 1455), (434, 195, 469, 334), (434, 334, 469, 474), (434, 474, 469, 614), (434, 614, 469, 754), (434, 754, 469, 894), (434, 894, 469, 1034), (434, 1034, 469, 1174), (434, 1174, 469, 1315), (434, 1315, 469, 1455), (469, 195, 504, 334), (469, 334, 504, 474), (469, 474, 504, 614), (469, 614, 504, 754), (469, 754, 504, 894), (469, 894, 504, 1034), (469, 1034, 504, 1174), (469, 1174, 504, 1315), (469, 1315, 504, 1455), (504, 195, 538, 334), (504, 334, 538, 474), (504, 474, 538, 614), (504, 614, 538, 754), (504, 754, 538, 894), (504, 894, 538, 1034), (504, 1034, 538, 1174), (504, 1174, 538, 1315), (504, 1315, 538, 1455), (538, 195, 573, 334), (538, 334, 573, 474), (538, 474, 573, 614), (538, 614, 573, 754), (538, 754, 573, 894), (538, 894, 573, 1034), (538, 1034, 573, 1174), (538, 1174, 573, 1315), (538, 1315, 573, 1455), (573, 195, 608, 334), (573, 334, 608, 474), (573, 474, 608, 614), (573, 614, 608, 754), (573, 754, 608, 894), (573, 894, 608, 1034), (573, 1034, 608, 1174), (573, 1174, 608, 1315), (573, 1315, 608, 1455), (608, 195, 642, 334), (608, 334, 642, 474), (608, 474, 642, 614), (608, 614, 642, 754), (608, 754, 642, 894), (608, 894, 642, 1034), (608, 1034, 642, 1174), (608, 1174, 642, 1315), (608, 1315, 642, 1455), (642, 195, 677, 334), (642, 334, 677, 474), (642, 474, 677, 614), (642, 614, 677, 754), (642, 754, 677, 894), (642, 894, 677, 1034), (642, 1034, 677, 1174), (642, 1174, 677, 1315), (642, 1315, 677, 1455), (677, 195, 712, 334), (677, 334, 712, 474), (677, 474, 712, 614), (677, 614, 712, 754), (677, 754, 712, 894), (677, 894, 712, 1034), (677, 1034, 712, 1174), (677, 1174, 712, 1315), (677, 1315, 712, 1455), (712, 195, 746, 334), (712, 334, 746, 474), (712, 474, 746, 614), (712, 614, 746, 754), (712, 754, 746, 894), (712, 894, 746, 1034), (712, 1034, 746, 1174), (712, 1174, 746, 1315), (712, 1315, 746, 1455), (746, 195, 781, 334), (746, 334, 781, 474), (746, 474, 781, 614), (746, 614, 781, 754), (746, 754, 781, 894), (746, 894, 781, 1034), (746, 1034, 781, 1174), (746, 1174, 781, 1315), (746, 1315, 781, 1455), (781, 195, 816, 334), (781, 334, 816, 474), (781, 474, 816, 614), (781, 614, 816, 754), (781, 754, 816, 894), (781, 894, 816, 1034), (781, 1034, 816, 1174), (781, 1174, 816, 1315), (781, 1315, 816, 1455)]
# coor = [(197,125,474,157),(477,125,754,157),(757,125,1034,157),(477,229,614,330),(477,576,614,608)]
# tem_old = ['Plant', '*', 'Date', '*', 'Order num.', '*', 'Contract num.', '*', 'Vendor', '*', 'Purchase unit', '*', 'No.', 'Matiral Num', 'Matrial Description', 'Unit', 'Quantity', 'Unit Price', 'Total Price', 'Applier', 'Remarks
# tem = [['Plant', '*', 'Date', '*'], ['Order num.', '*', 'Contract num.', '*'], ['Vendor', '*', 'Purchase unit', '*'], ['No.', 'Matiral Num', 'Matrial Description', 'Unit', 'Quantity', 'Unit Price', 'Total Price', 'Applier', 'Remarks
#records = ['Plant', '69', 'Date', 'None', 'Order num.', '69', 'Contract num.', 'single digit error', 'Vendor', 'apple', 'Purchase unit', 'anywhere', 'No.', 'MatrialDescription', 'Quantity', 'TotalPrice', 'MatiralNum', 'Unit', 'Unit Price', 'Applier', 'Remarks', '82', '24', 'nani?', 'None', 'None', 'None', 'None', 'None', 'None', '41', 'single digit error', 'test', 'None', 'None', 'None', 'None', 'None', 'None', '22', '12', 'nani?', 'None', 'None', 'None', 'None', 'None', 'None', '52', '87', 'test', 'None', 'None', 'None', 'None', 'None', 'None', '16', 'single digit error', 'test', 'None', 'None', 'None', 'None', 'None', 'None', '94', '87', 'test', 'None', 'None', 'None', 'None', 'None', 'None', '92', '16', 'test', 'None', 'None', 'None', 'None', 'None', 'None', '31', '99', 'nani?', 'None', 'None', 'None', 'None', 'None', 'None', '11', '53', 'test', 'None', 'None', 'None', 'None', 'None', 'None', '83', '48', 'nani?', 'None', 'None', 'None', 'None', 'None', 'None', '49', '53', 'test', 'None', 'None', 'None', 'None', 'None', 'None', '26', 'single digit error', 'LOL', 'None', 'None', 'None', 'None', 'None', 'None', '84', '35', 'test', 'None', 'None', 'None', 'None', 'None', 'None', '78', '94', 'LOL', 'None', 'None', 'None', 'None', 'None', 'None']
# records = ['Plant', '35', 'Date', 'None', 'Order num.', '38', 'Contract num.', '*SDE*', 'Vendor', 'banana', 'Purchase unit', 'anywhere', 'No‘', 'MatrialDescription', 'Quantity', 'TotalPrice', 'MatiralNum', 'Unit', 'Unit Price', 'Applier', 'Remarks', '64', '41', 'LOL', 'None', 'None', 'None', 'None', 'None', 'None', '61', '96', 'test', 'None', 'None', 'None', 'None', 'None', 'None', '89', '59', 'LOL', 'None', 'None', 'None', 'None', 'None', 'None', '96', '90', 'test', 'None', 'None', 'None', 'None', 'None', 'None', '21', '*SDE*', 'LOL', 'None', 'None', 'None', 'None', 'None', 'None', '*SDE*', '67', 'nani?', 'None', 'None', 'None', 'None', 'None', 'None', '70', '19', 'nani?', 'None', 'None', 'None', 'None', 'None', 'None', '35', '11', 'test', 'None', 'None', 'None', 'None', 'None', 'None', '41', '40', 'nani?', 'None', 'None', 'None', 'None', 'None', 'None', '59', '70', 'test', 'None', 'None', 'None', 'None', 'None', 'None', '66', '52', 'LOL', 'None', 'None', 'None', 'None', 'None', 'None', '50', '94', 'nani?', 'None', 'None', 'None', 'None', 'None', 'None', '34', '69', 'LOL', 'None', 'None', 'None', 'None', 'None', 'None', '43', '*SDE*', 'test', 'None', 'None', 'None', 'None', 'None', 'None', 'Company Code', 'None', 'Test', 'None', 'Company', 'None', 'Test1', 'None','No‘', 'MatrialDescription', 'Quantity', 'TotalPrice', 'MatiralNum', 'Unit', 'Unit Price', 'Applier', 'Remarks', '*SDE*', '22', 'LOL', 'None', 'None', 'None', 'None', 'None', 'None', '28', '17', 'LOL', 'None', 'None', 'None', 'None', 'None', 'None']
records = CoorToText(imagepath,coor)
CreateJson_old("dic.txt",records)
CreateJson("li.txt",records)
# CreateJson_old(filepath,CoorToText(imagepath,coor))
# print(CoorToText(imagepath,coor))